# These are the rule definitions for Ktistec. Rules define how inbound
# and outbound activities are processed and stored in collections.
#
# Rules are processed in order of their appearance in this file. For
# each rule, conditions are tested against facts and all combinations
# of facts for which all conditions were true are placed into an
# agenda. Once matching is complete, all of the actions associated
# with each match are executed. It's not possible for an action to
# change the contents of the agenda -- for each rule, all matches are
# computed and then actions are executed. An action can influence the
# matches for subsequent rules, however.
#
# Rules have the following syntax:
#   rule <name>
#     [optional trace]
#     <condition 1>
#     <condition 2>
#       ...
#     <condition N>
#     <action 1>
#     <action 2>
#       ...
#     <action M>
#   end
#
# <name> is a string of characters, enclosed in quotes. It does not
# have to be unique.
#
# Each <condition n> must begin with "condition", "any", or
# "none". The keyword "condition" specifies a pattern that must match
# a fact for the condition to be true. The keyword "any" specifies a
# pattern that must match at least once fact for the condition to be
# true. The keyword "none" specifies a pattern that must not match any
# facts for the condition to be true.
#
# Each <action m> must begin with "assert" or "retract". The keyword
# "assert" asserts a fact, adding it to the database. The keyword
# "retract" retracts a fact, removing it from the database.
#
# The keyword "trace" is optional. If specified in a rule, it enables
# tracing for the rule. Tracing dumps information about the matching
# process to the console, which can assist with debugging.
#
# Capitalized words (e.g. Object) are names of classes of facts.
# Uncapitalized words (e.g. owner) are variables that can be bound to
# values during matching and then used to constrain subsequent
# conditions. A variable can be bound to a fact, or to a string or
# numeric value.
#
# Some facts have fields, which are specified in patterns by names
# ending in a colon (e.g. owner:). Fields constrain the instances of a
# fact class that match a pattern.
#
# Consider a condition like the following:
#   condition Actor actor, iri: "https://foo.bar/baz"
#
# It will only match instances of the class Actor with the IRI
# "https://foo.bar/baz". Since IRIs happen to be unique, it will match
# one instance or none at all. If successful, it will bind `actor` to
# the matched fact.
#
# Consider a condition like the following where the string literal has
# been replaced by a variable:
#   condition Actor actor, iri: iri
#
# It will match all instances of the class Actor -- failing only if
# there are none. If successful, it will bind `actor` and `iri` to
# each matched fact and its IRI.
#
# Bound variables can be used in later conditions. Consider the
# following pair of conditions:
#   condition Actor actor, iri: "https://foo.bar/baz"
#   condition Object, object, attributed_to: actor
#
# These conditions will only match successfully if there is an
# instance of the class Actor with the IRI "https://foo.bar/baz" and
# at least one instance of the class Object which is attributed to
# that actor. If this were part of a rule, the rule actions would be
# executed for each such instance of class Object. Bound values for
# actor and object would be available to each action invocation.

# Outbox

rule "outbox"
  condition Outgoing, actor, activity
  none Outbox, owner: actor, activity: activity
  assert Outbox, owner: actor, activity: activity
  assert activity, InMailboxOf, actor
end

# Filter Incoming Content

rule "filter content/create"
  condition Incoming, actor, activity
  condition CreateActivity, activity, actor: not actor, object: object
  any Filter, actor: actor, term: filter(strip(object.content))
  retract Incoming, actor, activity
end

rule "filter content/announce"
  condition Incoming, actor, activity
  condition AnnounceActivity, activity, actor: not actor, object: object
  any Filter, actor: actor, term: filter(strip(object.content))
  retract Incoming, actor, activity
end

# Inbox

rule "inbox"
  condition Incoming, actor, activity
  condition Actor, actor, iri: iri
  condition iri, IsRecipient
  none Inbox, owner: actor, activity: activity
  assert Inbox, owner: actor, activity: activity
  assert activity, InMailboxOf, actor
end

rule "inbox"
  condition Incoming, actor, activity
  condition Activity, activity, actor: sender
  condition Follow, actor: actor, object: sender
  condition "https://www.w3.org/ns/activitystreams#Public", IsRecipient
  none Inbox, owner: actor, activity: activity
  assert Inbox, owner: actor, activity: activity
  assert activity, InMailboxOf, actor
end

rule "inbox"
  condition Incoming, actor, activity
  condition Activity, activity, actor: sender
  condition Follow, actor: actor, object: sender
  condition sender.followers, IsRecipient
  none Inbox, owner: actor, activity: activity
  assert Inbox, owner: actor, activity: activity
  assert activity, InMailboxOf, actor
end

# Mailbox Notifications

rule "create/mention"
  condition activity, InMailboxOf, actor
  condition CreateActivity, activity, object: object
  any Mention, mention, subject: object, href: actor.iri
  none Notification, owner: actor, activity: activity
  assert NotificationMention, owner: actor, activity: activity
end

rule "create/reply"
  condition activity, InMailboxOf, actor
  condition CreateActivity, activity, object: object
  condition Object, object, in_reply_to: other
  condition Object, other, attributed_to: actor
  none Notification, owner: actor, activity: activity
  assert NotificationReply, owner: actor, activity: activity
end

rule "announce"
  condition activity, InMailboxOf, actor
  condition AnnounceActivity, activity, object: object
  condition Object, object, attributed_to: actor
  none Notification, owner: actor, activity: activity
  assert NotificationAnnounce, owner: actor, activity: activity
end

rule "like"
  condition activity, InMailboxOf, actor
  condition LikeActivity, activity, object: object
  condition Object, object, attributed_to: actor
  none Notification, owner: actor, activity: activity
  assert NotificationLike, owner: actor, activity: activity
end

rule "follow"
  condition activity, InMailboxOf, actor
  condition FollowActivity, activity, object: actor
  none Notification, owner: actor, activity: activity
  assert NotificationFollow, owner: actor, activity: activity
end

rule "delete"
  condition delete, InMailboxOf, actor
  condition DeleteActivity, delete, object: object
  condition CreateActivity, activity, object: object
  any Notification, owner: actor, activity: activity
  retract Notification, owner: actor, activity: activity
end

rule "undo"
  condition undo, InMailboxOf, actor
  condition UndoActivity, undo, object: activity
  any Notification, owner: actor, activity: activity
  retract Notification, owner: actor, activity: activity
end

# Follow Notifications

rule "create/follow/hashtag"
  condition Incoming, actor, activity
  condition CreateActivity, activity, object: object
  condition Hashtag, subject: object, name: name
  any FollowHashtag, actor: actor, name: name
  none Notification, owner: actor, activity: activity
  assert NotificationHashtag, owner: actor, activity: activity
end

rule "announce/follow/hashtag"
  condition Incoming, actor, activity
  condition AnnounceActivity, activity, object: object
  condition Hashtag, subject: object, name: name
  any FollowHashtag, actor: actor, name: name
  none Notification, owner: actor, activity: activity
  assert NotificationHashtag, owner: actor, activity: activity
end

rule "create/follow/mention"
  condition Incoming, actor, activity
  condition CreateActivity, activity, object: object
  condition Mention, subject: object, name: name
  any FollowMention, actor: actor, name: name
  none Notification, owner: actor, activity: activity
  assert NotificationMention, owner: actor, activity: activity
end

rule "announce/follow/mention"
  condition Incoming, actor, activity
  condition AnnounceActivity, activity, object: object
  condition Mention, subject: object, name: name
  any FollowMention, actor: actor, name: name
  none Notification, owner: actor, activity: activity
  assert NotificationMention, owner: actor, activity: activity
end

rule "create/follow/thread"
  condition Incoming, actor, activity
  condition CreateActivity, activity, object: object
  condition Object, object, thread: thread
  condition FollowThread, actor: actor, thread: thread
  none Notification, owner: actor, activity: activity
  assert NotificationThread, owner: actor, activity: activity
end

rule "announce/follow/thread"
  condition Incoming, actor, activity
  condition AnnounceActivity, activity, object: object
  condition Object, object, thread: thread
  condition FollowThread, actor: actor, thread: thread
  none Notification, owner: actor, activity: activity
  assert NotificationThread, owner: actor, activity: activity
end

# Timeline

# the first two rules would be one rule if "or" was supported.
# notify if there are either no replies and no mentions, or the
# actor is mentioned.

rule "create/none"
  condition activity, InMailboxOf, actor
  condition CreateActivity, activity, object: object
  none Object, object, in_reply_to: any
  none Mention, mention, subject: object
  none Timeline, owner: actor, object: object
  assert TimelineCreate, owner: actor, object: object
end

rule "create/owner"
  condition activity, InMailboxOf, actor
  condition CreateActivity, activity, object: object
  condition Object, object, attributed_to: actor
  none Timeline, owner: actor, object: object
  assert TimelineCreate, owner: actor, object: object
end

rule "create/mention"
  condition activity, InMailboxOf, actor
  condition CreateActivity, activity, object: object
  any Mention, mention, subject: object, href: actor.iri
  none Timeline, owner: actor, object: object
  assert TimelineCreate, owner: actor, object: object
end

rule "announce"
  condition activity, InMailboxOf, actor
  condition AnnounceActivity, activity, object: object
  none Timeline, owner: actor, object: object
  assert TimelineAnnounce, owner: actor, object: object
end

rule "delete"
  condition activity, InMailboxOf, actor
  condition DeleteActivity, activity, object: object
  any Timeline, owner: actor, object: object
  retract Timeline, owner: actor, object: object
end

rule "undo"
  condition undo, InMailboxOf, actor
  condition UndoActivity, undo, object: activity
  condition AnnounceActivity, activity, object: object
  none CreateActivity, object: object
  none AnnounceActivity, not activity, object: object
  any Timeline, owner: actor, object: object
  retract Timeline, owner: actor, object: object
end
